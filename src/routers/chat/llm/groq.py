from .base import LLMProvider
import os
from groq import Groq
from typing import Generator

class GroqProvider(LLMProvider):
    """
    An LLM provider that uses the Groq API to serve Llama models.
    """
    def __init__(self):
        self.client = Groq(api_key=os.environ.get("GROQ_API_KEY"))
        self.model = "openai/gpt-oss-120b"

    def query(self, system_prompt: str, user_prompt: str) -> Generator[str, None, None]:
        """
        Sends a streaming query to a Llama model via the Groq API.

        Args:
            system_prompt: The instruction or context for the model's behavior.
            user_prompt: The user's direct question or input.

        Yields:
            Chunks of the text response as they are generated by the LLM.
        """
        response = self.client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": user_prompt,
                }
            ],
            temperature=0,
            model=self.model,
            stream=False,
            tools=None,
            tool_choice="none"
        )

        print("Input tokens:", response.usage.prompt_tokens)
        print("Output tokens:", response.usage.completion_tokens)
        print("Total tokens:", response.usage.total_tokens)

        return response.choices[0].message.content